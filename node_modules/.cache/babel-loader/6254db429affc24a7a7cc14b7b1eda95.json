{"ast":null,"code":"import { testioActions } from \"./testio-slice\";\nconst adminUser = {\n  username: \"oxylabs\",\n  password: \"partyanimal\"\n};\nexport const logIn = details => {\n  //setLoading(true);\n  fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCRrLwSJQ3fAFX76n4LdNRsB8l57pA_5q0\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      email: details.username,\n      password: details.password,\n      returnSecureToken: true\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => {\n    //setLoading(false);\n    if (res.ok) {\n      return res.json();\n    } else {\n      return res.json().then(data => {\n        let errorMessage = \"Auth failed\";\n        /* if (data && data.error && data.error.message) {\n            errorMessage = data.error.message;\n          } */\n\n        throw new Error(errorMessage);\n      });\n    }\n  }).then(data => {\n    const expirationTime = new Date(new Date().getTime() + +data.expiresIn * 10);\n    authCtx.login(data.idToken, expirationTime.toISOString());\n    history.replace(\"/\");\n  }).catch(error => {\n    alert(error.message);\n  });\n  /* if (\n    details.username === adminUser.username &&\n    details.password === adminUser.password\n  ) {\n    return async (dispatch) => {\n      const token = await getToken({\n        username: details.username,\n        password: details.password,\n      });\n      dispatch(testioActions.confirmLogin(token));\n    };\n  } else {\n    alert(\"User details do not match\");\n  } */\n};\n\nasync function getToken(_ref) {\n  let {\n    username,\n    password\n  } = _ref;\n  const response = await fetch(\"https://playground.oxylabs.io/api/user/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  const data = await response.json();\n  return data.token;\n}","map":{"version":3,"names":["testioActions","adminUser","username","password","logIn","details","fetch","method","body","JSON","stringify","email","returnSecureToken","headers","then","res","ok","json","data","errorMessage","Error","expirationTime","Date","getTime","expiresIn","authCtx","login","idToken","toISOString","history","replace","catch","error","alert","message","getToken","response","token"],"sources":["/Users/vidmantasburba/Documents/GitHub/testio/src/store/login-actions.js"],"sourcesContent":["import { testioActions } from \"./testio-slice\";\n\nconst adminUser = {\n  username: \"oxylabs\",\n  password: \"partyanimal\",\n};\n\nexport const logIn = (details) => {\n  //setLoading(true);\n\n  fetch(\n    \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCRrLwSJQ3fAFX76n4LdNRsB8l57pA_5q0\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: details.username,\n        password: details.password,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  )\n    .then((res) => {\n      //setLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then((data) => {\n          let errorMessage = \"Auth failed\";\n          /* if (data && data.error && data.error.message) {\n              errorMessage = data.error.message;\n            } */\n          throw new Error(errorMessage);\n        });\n      }\n    })\n    .then((data) => {\n      const expirationTime = new Date(\n        new Date().getTime() + +data.expiresIn * 10\n      );\n      authCtx.login(data.idToken, expirationTime.toISOString());\n      history.replace(\"/\");\n    })\n    .catch((error) => {\n      alert(error.message);\n    });\n\n  /* if (\n    details.username === adminUser.username &&\n    details.password === adminUser.password\n  ) {\n    return async (dispatch) => {\n      const token = await getToken({\n        username: details.username,\n        password: details.password,\n      });\n      dispatch(testioActions.confirmLogin(token));\n    };\n  } else {\n    alert(\"User details do not match\");\n  } */\n};\n\nasync function getToken({ username, password }) {\n  const response = await fetch(\"https://playground.oxylabs.io/api/user/login\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      username,\n      password,\n    }),\n  });\n\n  const data = await response.json();\n\n  return data.token;\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,gBAA9B;AAEA,MAAMC,SAAS,GAAG;EAChBC,QAAQ,EAAE,SADM;EAEhBC,QAAQ,EAAE;AAFM,CAAlB;AAKA,OAAO,MAAMC,KAAK,GAAIC,OAAD,IAAa;EAChC;EAEAC,KAAK,CACH,mHADG,EAEH;IACEC,MAAM,EAAE,MADV;IAEEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBC,KAAK,EAAEN,OAAO,CAACH,QADI;MAEnBC,QAAQ,EAAEE,OAAO,CAACF,QAFC;MAGnBS,iBAAiB,EAAE;IAHA,CAAf,CAFR;IAOEC,OAAO,EAAE;MACP,gBAAgB;IADT;EAPX,CAFG,CAAL,CAcGC,IAdH,CAcSC,GAAD,IAAS;IACb;IAEA,IAAIA,GAAG,CAACC,EAAR,EAAY;MACV,OAAOD,GAAG,CAACE,IAAJ,EAAP;IACD,CAFD,MAEO;MACL,OAAOF,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAiBI,IAAD,IAAU;QAC/B,IAAIC,YAAY,GAAG,aAAnB;QACA;AACV;AACA;;QACU,MAAM,IAAIC,KAAJ,CAAUD,YAAV,CAAN;MACD,CANM,CAAP;IAOD;EACF,CA5BH,EA6BGL,IA7BH,CA6BSI,IAAD,IAAU;IACd,MAAMG,cAAc,GAAG,IAAIC,IAAJ,CACrB,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,CAACL,IAAI,CAACM,SAAN,GAAkB,EADpB,CAAvB;IAGAC,OAAO,CAACC,KAAR,CAAcR,IAAI,CAACS,OAAnB,EAA4BN,cAAc,CAACO,WAAf,EAA5B;IACAC,OAAO,CAACC,OAAR,CAAgB,GAAhB;EACD,CAnCH,EAoCGC,KApCH,CAoCUC,KAAD,IAAW;IAChBC,KAAK,CAACD,KAAK,CAACE,OAAP,CAAL;EACD,CAtCH;EAwCA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CAzDM;;AA2DP,eAAeC,QAAf,OAAgD;EAAA,IAAxB;IAAEjC,QAAF;IAAYC;EAAZ,CAAwB;EAC9C,MAAMiC,QAAQ,GAAG,MAAM9B,KAAK,CAAC,8CAAD,EAAiD;IAC3EC,MAAM,EAAE,MADmE;IAE3EM,OAAO,EAAE;MAAE,gBAAgB;IAAlB,CAFkE;IAG3EL,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBR,QADmB;MAEnBC;IAFmB,CAAf;EAHqE,CAAjD,CAA5B;EASA,MAAMe,IAAI,GAAG,MAAMkB,QAAQ,CAACnB,IAAT,EAAnB;EAEA,OAAOC,IAAI,CAACmB,KAAZ;AACD"},"metadata":{},"sourceType":"module"}