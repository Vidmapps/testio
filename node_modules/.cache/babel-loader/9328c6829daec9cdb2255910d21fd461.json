{"ast":null,"code":"/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\nimport http from 'http';\nimport https from 'https';\nimport zlib from 'zlib';\nimport Stream, { PassThrough, pipeline as pump } from 'stream';\nimport dataUriToBuffer from 'data-uri-to-buffer';\nimport { writeToStream } from './body.js';\nimport Response from './response.js';\nimport Headers, { fromRawHeaders } from './headers.js';\nimport Request, { getNodeRequestOptions } from './request.js';\nimport { FetchError } from './errors/fetch-error.js';\nimport { AbortError } from './errors/abort-error.js';\nimport { isRedirect } from './utils/is-redirect.js';\nexport { Headers, Request, Response, FetchError, AbortError, isRedirect };\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\n\nexport default async function fetch(url, options_) {\n  return new Promise((resolve, reject) => {\n    // Build request object\n    const request = new Request(url, options_);\n    const options = getNodeRequestOptions(request);\n\n    if (!supportedSchemas.has(options.protocol)) {\n      throw new TypeError(`node-fetch cannot load ${url}. URL scheme \"${options.protocol.replace(/:$/, '')}\" is not supported.`);\n    }\n\n    if (options.protocol === 'data:') {\n      const data = dataUriToBuffer(request.url);\n      const response = new Response(data, {\n        headers: {\n          'Content-Type': data.typeFull\n        }\n      });\n      resolve(response);\n      return;\n    } // Wrap http.request into fetch\n\n\n    const send = (options.protocol === 'https:' ? https : http).request;\n    const {\n      signal\n    } = request;\n    let response = null;\n\n    const abort = () => {\n      const error = new AbortError('The operation was aborted.');\n      reject(error);\n\n      if (request.body && request.body instanceof Stream.Readable) {\n        request.body.destroy(error);\n      }\n\n      if (!response || !response.body) {\n        return;\n      }\n\n      response.body.emit('error', error);\n    };\n\n    if (signal && signal.aborted) {\n      abort();\n      return;\n    }\n\n    const abortAndFinalize = () => {\n      abort();\n      finalize();\n    }; // Send request\n\n\n    const request_ = send(options);\n\n    if (signal) {\n      signal.addEventListener('abort', abortAndFinalize);\n    }\n\n    const finalize = () => {\n      request_.abort();\n\n      if (signal) {\n        signal.removeEventListener('abort', abortAndFinalize);\n      }\n    };\n\n    request_.on('error', error => {\n      reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n      finalize();\n    });\n    fixResponseChunkedTransferBadEnding(request_, error => {\n      response.body.destroy(error);\n    });\n    /* c8 ignore next 18 */\n\n    if (process.version < 'v14') {\n      // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n      // properly handle when the socket close/end events are out of order.\n      request_.on('socket', s => {\n        let endedWithEventsCount;\n        s.prependListener('end', () => {\n          endedWithEventsCount = s._eventsCount;\n        });\n        s.prependListener('close', hadError => {\n          // if end happened before close but the socket didn't emit an error, do it now\n          if (response && endedWithEventsCount < s._eventsCount && !hadError) {\n            const error = new Error('Premature close');\n            error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n            response.body.emit('error', error);\n          }\n        });\n      });\n    }\n\n    request_.on('response', response_ => {\n      request_.setTimeout(0);\n      const headers = fromRawHeaders(response_.rawHeaders); // HTTP fetch step 5\n\n      if (isRedirect(response_.statusCode)) {\n        // HTTP fetch step 5.2\n        const location = headers.get('Location'); // HTTP fetch step 5.3\n\n        const locationURL = location === null ? null : new URL(location, request.url); // HTTP fetch step 5.5\n\n        switch (request.redirect) {\n          case 'error':\n            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n            finalize();\n            return;\n\n          case 'manual':\n            // Node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n            if (locationURL !== null) {\n              headers.set('Location', locationURL);\n            }\n\n            break;\n\n          case 'follow':\n            {\n              // HTTP-redirect fetch step 2\n              if (locationURL === null) {\n                break;\n              } // HTTP-redirect fetch step 5\n\n\n              if (request.counter >= request.follow) {\n                reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n                finalize();\n                return;\n              } // HTTP-redirect fetch step 6 (counter increment)\n              // Create a new Request object.\n\n\n              const requestOptions = {\n                headers: new Headers(request.headers),\n                follow: request.follow,\n                counter: request.counter + 1,\n                agent: request.agent,\n                compress: request.compress,\n                method: request.method,\n                body: request.body,\n                signal: request.signal,\n                size: request.size\n              }; // HTTP-redirect fetch step 9\n\n              if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n                reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n                finalize();\n                return;\n              } // HTTP-redirect fetch step 11\n\n\n              if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST') {\n                requestOptions.method = 'GET';\n                requestOptions.body = undefined;\n                requestOptions.headers.delete('content-length');\n              } // HTTP-redirect fetch step 15\n\n\n              resolve(fetch(new Request(locationURL, requestOptions)));\n              finalize();\n              return;\n            }\n\n          default:\n            return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n        }\n      } // Prepare response\n\n\n      if (signal) {\n        response_.once('end', () => {\n          signal.removeEventListener('abort', abortAndFinalize);\n        });\n      }\n\n      let body = pump(response_, new PassThrough(), reject); // see https://github.com/nodejs/node/pull/29376\n\n      if (process.version < 'v12.10') {\n        response_.on('aborted', abortAndFinalize);\n      }\n\n      const responseOptions = {\n        url: request.url,\n        status: response_.statusCode,\n        statusText: response_.statusMessage,\n        headers,\n        size: request.size,\n        counter: request.counter,\n        highWaterMark: request.highWaterMark\n      }; // HTTP-network fetch step 12.1.1.3\n\n      const codings = headers.get('Content-Encoding'); // HTTP-network fetch step 12.1.1.4: handle content codings\n      // in following scenarios we ignore compression support\n      // 1. compression support is disabled\n      // 2. HEAD request\n      // 3. no Content-Encoding header\n      // 4. no content response (204)\n      // 5. content not modified response (304)\n\n      if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      } // For Node v6+\n      // Be less strict when decoding compressed responses, since sometimes\n      // servers send slightly invalid responses that are still accepted\n      // by common browsers.\n      // Always using Z_SYNC_FLUSH is what cURL does.\n\n\n      const zlibOptions = {\n        flush: zlib.Z_SYNC_FLUSH,\n        finishFlush: zlib.Z_SYNC_FLUSH\n      }; // For gzip\n\n      if (codings === 'gzip' || codings === 'x-gzip') {\n        body = pump(body, zlib.createGunzip(zlibOptions), reject);\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      } // For deflate\n\n\n      if (codings === 'deflate' || codings === 'x-deflate') {\n        // Handle the infamous raw deflate response from old servers\n        // a hack for old IIS and Apache servers\n        const raw = pump(response_, new PassThrough(), reject);\n        raw.once('data', chunk => {\n          // See http://stackoverflow.com/questions/37519828\n          body = (chunk[0] & 0x0F) === 0x08 ? pump(body, zlib.createInflate(), reject) : pump(body, zlib.createInflateRaw(), reject);\n          response = new Response(body, responseOptions);\n          resolve(response);\n        });\n        return;\n      } // For br\n\n\n      if (codings === 'br') {\n        body = pump(body, zlib.createBrotliDecompress(), reject);\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      } // Otherwise, use response as-is\n\n\n      response = new Response(body, responseOptions);\n      resolve(response);\n    });\n    writeToStream(request_, request);\n  });\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n  const LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n  let isChunkedTransfer = false;\n  let properLastChunkReceived = false;\n  let previousChunk;\n  request.on('response', response => {\n    const {\n      headers\n    } = response;\n    isChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n  });\n  request.on('socket', socket => {\n    const onSocketClose = () => {\n      if (isChunkedTransfer && !properLastChunkReceived) {\n        const error = new Error('Premature close');\n        error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n        errorCallback(error);\n      }\n    };\n\n    socket.prependListener('close', onSocketClose);\n    request.on('abort', () => {\n      socket.removeListener('close', onSocketClose);\n    });\n    socket.on('data', buf => {\n      properLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0; // Sometimes final 0-length chunk and end of message code are in separate packets\n\n      if (!properLastChunkReceived && previousChunk) {\n        properLastChunkReceived = Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;\n      }\n\n      previousChunk = buf;\n    });\n  });\n}","map":{"version":3,"sources":["/Users/vidmantasburba/Desktop/FrontEnd/frontend_oxylabs/testio/node_modules/node-fetch/src/index.js"],"names":["http","https","zlib","Stream","PassThrough","pipeline","pump","dataUriToBuffer","writeToStream","Response","Headers","fromRawHeaders","Request","getNodeRequestOptions","FetchError","AbortError","isRedirect","supportedSchemas","Set","fetch","url","options_","Promise","resolve","reject","request","options","has","protocol","TypeError","replace","data","response","headers","typeFull","send","signal","abort","error","body","Readable","destroy","emit","aborted","abortAndFinalize","finalize","request_","addEventListener","removeEventListener","on","message","fixResponseChunkedTransferBadEnding","process","version","s","endedWithEventsCount","prependListener","_eventsCount","hadError","Error","code","response_","setTimeout","rawHeaders","statusCode","location","get","locationURL","URL","redirect","set","counter","follow","requestOptions","agent","compress","method","size","undefined","delete","once","responseOptions","status","statusText","statusMessage","highWaterMark","codings","zlibOptions","flush","Z_SYNC_FLUSH","finishFlush","createGunzip","raw","chunk","createInflate","createInflateRaw","createBrotliDecompress","errorCallback","LAST_CHUNK","Buffer","from","isChunkedTransfer","properLastChunkReceived","previousChunk","socket","onSocketClose","removeListener","buf","compare","slice"],"mappings":"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","sourcesContent":["/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'http';\nimport https from 'https';\nimport zlib from 'zlib';\nimport Stream, {PassThrough, pipeline as pump} from 'stream';\nimport dataUriToBuffer from 'data-uri-to-buffer';\n\nimport {writeToStream} from './body.js';\nimport Response from './response.js';\nimport Headers, {fromRawHeaders} from './headers.js';\nimport Request, {getNodeRequestOptions} from './request.js';\nimport {FetchError} from './errors/fetch-error.js';\nimport {AbortError} from './errors/abort-error.js';\nimport {isRedirect} from './utils/is-redirect.js';\n\nexport {Headers, Request, Response, FetchError, AbortError, isRedirect};\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default async function fetch(url, options_) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new Request(url, options_);\n\t\tconst options = getNodeRequestOptions(request);\n\t\tif (!supportedSchemas.has(options.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${options.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (options.protocol === 'data:') {\n\t\t\tconst data = dataUriToBuffer(request.url);\n\t\t\tconst response = new Response(data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (options.protocol === 'https:' ? https : http).request;\n\t\tconst {signal} = request;\n\t\tlet response = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\n\t\t\tif (!response || !response.body) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', error => {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\n\t\t\tresponse.body.destroy(error);\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (process.version < 'v14') {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\tlet endedWithEventsCount;\n\t\t\t\ts.prependListener('end', () => {\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\n\t\t\t\t});\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\n\t\t\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', response_ => {\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = fromRawHeaders(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (isRedirect(response_.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tconst locationURL = location === null ? null : new URL(location, request.url);\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\theaders.set('Location', locationURL);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: request.body,\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOptions)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = pump(response_, new PassThrough(), reject);\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = pump(body, zlib.createGunzip(zlibOptions), reject);\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = pump(response_, new PassThrough(), reject);\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tbody = (chunk[0] & 0x0F) === 0x08 ? pump(body, zlib.createInflate(), reject) : pump(body, zlib.createInflateRaw(), reject);\n\n\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = pump(body, zlib.createBrotliDecompress(), reject);\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new Response(body, responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\twriteToStream(request_, request);\n\t});\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tconst LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n\n\tlet isChunkedTransfer = false;\n\tlet properLastChunkReceived = false;\n\tlet previousChunk;\n\n\trequest.on('response', response => {\n\t\tconst {headers} = response;\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n\t});\n\n\trequest.on('socket', socket => {\n\t\tconst onSocketClose = () => {\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\n\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\terrorCallback(error);\n\t\t\t}\n\t\t};\n\n\t\tsocket.prependListener('close', onSocketClose);\n\n\t\trequest.on('abort', () => {\n\t\t\tsocket.removeListener('close', onSocketClose);\n\t\t});\n\n\t\tsocket.on('data', buf => {\n\t\t\tproperLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\n\t\t\tif (!properLastChunkReceived && previousChunk) {\n\t\t\t\tproperLastChunkReceived = (\n\t\t\t\t\tBuffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\n\t\t\t\t\tBuffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpreviousChunk = buf;\n\t\t});\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}