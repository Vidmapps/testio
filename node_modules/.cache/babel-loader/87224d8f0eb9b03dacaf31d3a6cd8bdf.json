{"ast":null,"code":"import { testioActions } from \"./testio-slice\";\nconst adminUser = {\n  username: \"oxylabs\",\n  password: \"pa\"\n};\nexport const logIn = async details => {\n  if (details.username === adminUser.username && details.password === adminUser.password) {\n    await getToken({\n      username: details.username,\n      password: details.password\n    });\n    dispatch(testioActions.confirmLogin(data.token));\n  } else {\n    alert(\"User details do not match\");\n  }\n};\n\nasync function getToken(_ref) {\n  let {\n    username,\n    password\n  } = _ref;\n  console.log(username);\n  const response = await fetch(\"https://playground.oxylabs.io/api/user/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  });\n  const data = await response.json();\n  return data;\n}","map":{"version":3,"names":["testioActions","adminUser","username","password","logIn","details","getToken","dispatch","confirmLogin","data","token","alert","console","log","response","fetch","method","headers","body","JSON","stringify","json"],"sources":["/Users/vidmantasburba/Documents/GitHub/testio/src/store/login-actions.js"],"sourcesContent":["import { testioActions } from \"./testio-slice\";\n\nconst adminUser = {\n  username: \"oxylabs\",\n  password: \"pa\",\n};\n\nexport const logIn = async (details) => {\n  if (\n    details.username === adminUser.username &&\n    details.password === adminUser.password\n  ) {\n    await getToken({\n      username: details.username,\n      password: details.password,\n    });\n    dispatch(testioActions.confirmLogin(data.token));\n  } else {\n    alert(\"User details do not match\");\n  }\n};\n\nasync function getToken({ username, password }) {\n  console.log(username);\n\n  const response = await fetch(\"https://playground.oxylabs.io/api/user/login\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      username: username,\n      password: password,\n    }),\n  });\n\n  const data = await response.json();\n  return data;\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,gBAA9B;AAEA,MAAMC,SAAS,GAAG;EAChBC,QAAQ,EAAE,SADM;EAEhBC,QAAQ,EAAE;AAFM,CAAlB;AAKA,OAAO,MAAMC,KAAK,GAAG,MAAOC,OAAP,IAAmB;EACtC,IACEA,OAAO,CAACH,QAAR,KAAqBD,SAAS,CAACC,QAA/B,IACAG,OAAO,CAACF,QAAR,KAAqBF,SAAS,CAACE,QAFjC,EAGE;IACA,MAAMG,QAAQ,CAAC;MACbJ,QAAQ,EAAEG,OAAO,CAACH,QADL;MAEbC,QAAQ,EAAEE,OAAO,CAACF;IAFL,CAAD,CAAd;IAIAI,QAAQ,CAACP,aAAa,CAACQ,YAAd,CAA2BC,IAAI,CAACC,KAAhC,CAAD,CAAR;EACD,CATD,MASO;IACLC,KAAK,CAAC,2BAAD,CAAL;EACD;AACF,CAbM;;AAeP,eAAeL,QAAf,OAAgD;EAAA,IAAxB;IAAEJ,QAAF;IAAYC;EAAZ,CAAwB;EAC9CS,OAAO,CAACC,GAAR,CAAYX,QAAZ;EAEA,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAAD,EAAiD;IAC3EC,MAAM,EAAE,MADmE;IAE3EC,OAAO,EAAE;MAAE,gBAAgB;IAAlB,CAFkE;IAG3EC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBlB,QAAQ,EAAEA,QADS;MAEnBC,QAAQ,EAAEA;IAFS,CAAf;EAHqE,CAAjD,CAA5B;EASA,MAAMM,IAAI,GAAG,MAAMK,QAAQ,CAACO,IAAT,EAAnB;EACA,OAAOZ,IAAP;AACD"},"metadata":{},"sourceType":"module"}