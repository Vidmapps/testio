{"ast":null,"code":"/**\n * Response.js\n *\n * Response class provides content decoding\n */\nimport Headers from './headers.js';\nimport Body, { clone, extractContentType } from './body.js';\nimport { isRedirect } from './utils/is-redirect.js';\nconst INTERNALS = Symbol('Response internals');\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\n\nexport default class Response extends Body {\n  constructor(body = null, options = {}) {\n    super(body, options); // eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n\n    const status = options.status != null ? options.status : 200;\n    const headers = new Headers(options.headers);\n\n    if (body !== null && !headers.has('Content-Type')) {\n      const contentType = extractContentType(body);\n\n      if (contentType) {\n        headers.append('Content-Type', contentType);\n      }\n    }\n\n    this[INTERNALS] = {\n      type: 'default',\n      url: options.url,\n      status,\n      statusText: options.statusText || '',\n      headers,\n      counter: options.counter,\n      highWaterMark: options.highWaterMark\n    };\n  }\n\n  get type() {\n    return this[INTERNALS].type;\n  }\n\n  get url() {\n    return this[INTERNALS].url || '';\n  }\n\n  get status() {\n    return this[INTERNALS].status;\n  }\n  /**\n   * Convenience property representing if the request ended normally\n   */\n\n\n  get ok() {\n    return this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n  }\n\n  get redirected() {\n    return this[INTERNALS].counter > 0;\n  }\n\n  get statusText() {\n    return this[INTERNALS].statusText;\n  }\n\n  get headers() {\n    return this[INTERNALS].headers;\n  }\n\n  get highWaterMark() {\n    return this[INTERNALS].highWaterMark;\n  }\n  /**\n   * Clone this response\n   *\n   * @return  Response\n   */\n\n\n  clone() {\n    return new Response(clone(this, this.highWaterMark), {\n      type: this.type,\n      url: this.url,\n      status: this.status,\n      statusText: this.statusText,\n      headers: this.headers,\n      ok: this.ok,\n      redirected: this.redirected,\n      size: this.size\n    });\n  }\n  /**\n   * @param {string} url    The URL that the new response is to originate from.\n   * @param {number} status An optional status code for the response (e.g., 302.)\n   * @returns {Response}    A Response object.\n   */\n\n\n  static redirect(url, status = 302) {\n    if (!isRedirect(status)) {\n      throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n    }\n\n    return new Response(null, {\n      headers: {\n        location: new URL(url).toString()\n      },\n      status\n    });\n  }\n\n  static error() {\n    const response = new Response(null, {\n      status: 0,\n      statusText: ''\n    });\n    response[INTERNALS].type = 'error';\n    return response;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Response';\n  }\n\n}\nObject.defineProperties(Response.prototype, {\n  type: {\n    enumerable: true\n  },\n  url: {\n    enumerable: true\n  },\n  status: {\n    enumerable: true\n  },\n  ok: {\n    enumerable: true\n  },\n  redirected: {\n    enumerable: true\n  },\n  statusText: {\n    enumerable: true\n  },\n  headers: {\n    enumerable: true\n  },\n  clone: {\n    enumerable: true\n  }\n});","map":{"version":3,"sources":["/Users/vidmantasburba/Desktop/FrontEnd/frontend_oxylabs/testio/node_modules/node-fetch/src/response.js"],"names":["Headers","Body","clone","extractContentType","isRedirect","INTERNALS","Symbol","Response","constructor","body","options","status","headers","has","contentType","append","type","url","statusText","counter","highWaterMark","ok","redirected","size","redirect","RangeError","location","URL","toString","error","response","toStringTag","Object","defineProperties","prototype","enumerable"],"mappings":"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","sourcesContent":["/**\n * Response.js\n *\n * Response class provides content decoding\n */\n\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType} from './body.js';\nimport {isRedirect} from './utils/is-redirect.js';\n\nconst INTERNALS = Symbol('Response internals');\n\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Response extends Body {\n\tconstructor(body = null, options = {}) {\n\t\tsuper(body, options);\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n\t\tconst status = options.status != null ? options.status : 200;\n\n\t\tconst headers = new Headers(options.headers);\n\n\t\tif (body !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\ttype: 'default',\n\t\t\turl: options.url,\n\t\t\tstatus,\n\t\t\tstatusText: options.statusText || '',\n\t\t\theaders,\n\t\t\tcounter: options.counter,\n\t\t\thighWaterMark: options.highWaterMark\n\t\t};\n\t}\n\n\tget type() {\n\t\treturn this[INTERNALS].type;\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS].status;\n\t}\n\n\t/**\n\t * Convenience property representing if the request ended normally\n\t */\n\tget ok() {\n\t\treturn this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget highWaterMark() {\n\t\treturn this[INTERNALS].highWaterMark;\n\t}\n\n\t/**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */\n\tclone() {\n\t\treturn new Response(clone(this, this.highWaterMark), {\n\t\t\ttype: this.type,\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected,\n\t\t\tsize: this.size\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */\n\tstatic redirect(url, status = 302) {\n\t\tif (!isRedirect(status)) {\n\t\t\tthrow new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n\t\t}\n\n\t\treturn new Response(null, {\n\t\t\theaders: {\n\t\t\t\tlocation: new URL(url).toString()\n\t\t\t},\n\t\t\tstatus\n\t\t});\n\t}\n\n\tstatic error() {\n\t\tconst response = new Response(null, {status: 0, statusText: ''});\n\t\tresponse[INTERNALS].type = 'error';\n\t\treturn response;\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Response';\n\t}\n}\n\nObject.defineProperties(Response.prototype, {\n\ttype: {enumerable: true},\n\turl: {enumerable: true},\n\tstatus: {enumerable: true},\n\tok: {enumerable: true},\n\tredirected: {enumerable: true},\n\tstatusText: {enumerable: true},\n\theaders: {enumerable: true},\n\tclone: {enumerable: true}\n});\n"]},"metadata":{},"sourceType":"module"}